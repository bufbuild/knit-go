// Copyright 2023-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.knit.crosstest;

import "buf/knit/v1alpha1/options.proto";
import "google/protobuf/empty.proto";

message Parent {
  string id = 1;
  string name = 2;
}

service ParentService {
  rpc ListParents(ListParentsRequest) returns (ListParentsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc GetParent(GetParentRequest) returns (Parent) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc CreateParent(CreateParentRequest) returns (Parent);
  rpc UpdateParent(UpdateParentRequest) returns (Parent);
  rpc DeleteParent(DeleteParentRequest) returns (google.protobuf.Empty);
}

message ListParentsRequest {
  string parent = 1;
  uint32 page_size = 2;
  string page_token = 3;
}

message ListParentsResponse {
  repeated Parent parents = 1;
  string next_page_token = 2;
}

message GetParentRequest {
  string id = 1;
}

message CreateParentRequest {
  Parent parent = 1;
}

message UpdateParentRequest {
  Parent parent = 1;
}

message DeleteParentRequest {
  string id = 1;
}

message Child {
  string id = 1;
}

service ChildService {
  rpc ListChildren(ListChildrenRequest) returns (ListChildrenResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc GetChild(GetChildRequest) returns (Child) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc CreateChild(CreateChildRequest) returns (Child);
  rpc UpdateChild(UpdateChildRequest) returns (Child);
  rpc DeleteChild(DeleteChildRequest) returns (google.protobuf.Empty);
}

message ListChildrenRequest {
  string parent = 1;
  uint32 page_size = 2;
  string page_token = 3;
}

message ListChildrenResponse {
  repeated Child children = 1;
  string next_page_token = 2;
}

message GetChildRequest {
  string id = 1;
}

message CreateChildRequest {
  string parent = 1;
  Child child = 2;
}

message UpdateChildRequest {
  Child child = 1;
}

message DeleteChildRequest {
  string id = 1;
}

// Relationships

service RelationsService {
  rpc GetChildParent(GetChildParentRequest) returns (GetChildParentResponse) {
    option (buf.knit.v1alpha1.relation).name = "parent";
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc GetParentChildren(GetParentChildrenRequest) returns (GetParentChildrenResponse) {
    option (buf.knit.v1alpha1.relation).name = "children";
    option idempotency_level = NO_SIDE_EFFECTS;
  }
}

message GetChildParentRequest {
  repeated Child bases = 1;
}

message GetChildParentResponse {
  repeated ChildResult values = 1;
  message ChildResult {
    Parent parent = 1;
  }
}

message GetParentChildrenRequest {
  repeated Parent bases = 1;

  uint32 page_size = 2;
  string page_token = 3;
}

message GetParentChildrenResponse {
  repeated ParentResult values = 1;
  message ParentResult {
    ChildrenPage children = 1;
  }
}

message ChildrenPage {
  repeated Child nodes = 1;
  string next_page_token = 2;
}
